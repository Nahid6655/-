#include <iostream>
#include <limits>
using namespace std;

int main() {
    setlocale(LC_ALL, "RU");

    int n = 0;
    cout << "Количество вершин: ";
    cin >> n;

    // Проверка корректности количества вершин
    if (n < 3) {
        cout << "Ошибка: многоугольник должен иметь至少 3 вершины!" << endl;
        return 1;
    }
    if (n > 100) {
        cout << "Ошибка: слишком много вершин (максимум 100)!" << endl;
        return 1;
    }

    double x[100], y[100];

    // Ввод вершин многоугольника
    for (int i = 0; i < n; i++) {
        cout << "Вершина " << i + 1 << " (x y): ";
        cin >> x[i] >> y[i];
        
        // Проверка на корректность ввода
        if (cin.fail()) {
            cout << "Ошибка ввода! Пожалуйста, введите числа." << endl;
            return 1;
        }
    }

    double px, py;
    cout << "Координаты точки (x y): ";
    cin >> px >> py;

    // Проверка на корректность ввода точки
    if (cin.fail()) {
        cout << "Ошибка ввода! Пожалуйста, введите числа." << endl;
        return 1;
    }

    int count = 0;
    
    // Алгоритм луча: выпускаем горизонтальный луч справа от точки
    for (int i = 0; i < n; i++) {
        int j = (i + 1) % n; // следующая вершина (с замыканием на первую)

        // Проверяем, пересекает ли луч отрезок
        // Условие: концы отрезка находятся по разные стороны от луча
        if ((y[i] > py) != (y[j] > py)) {
            
            // Вычисляем X-координату пересечения луча с отрезком
            double intersect_x = (x[j] - x[i]) * (py - y[i]) / (y[j] - y[i]) + x[i];
            
            // Если точка находится слева от пересечения, увеличиваем счетчик
            if (px < intersect_x) {
                count++;
            }
        }
    }

    // Если количество пересечений нечетное - точка внутри
    if (count % 2 == 1) {
        cout << "Точка ВНУТРИ многоугольника" << endl;
    } else {
        cout << "Точка СНАРУЖИ многоугольника" << endl;
    }

    return 0;
}
